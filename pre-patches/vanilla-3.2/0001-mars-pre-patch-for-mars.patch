From a189108653ed597a2af049c068f3a41edf976afc Mon Sep 17 00:00:00 2001
From: Thomas Schoebel-Theuer <tst@1und1.de>
Date: Thu, 30 Jan 2020 10:56:34 +0100
Subject: [PATCH] mars: pre-patch for mars

Mostly introduces missing EXPORT_SYMBOL().
Should have exactly zero impact onto the kernel.
---
 fs/aio.c              | 6 ++++++
 fs/namei.c            | 5 +++++
 fs/open.c             | 2 ++
 fs/utimes.c           | 2 ++
 include/linux/aio.h   | 1 +
 include/linux/major.h | 1 +
 mm/page_alloc.c       | 2 ++
 mm/swap_state.c       | 1 +
 8 files changed, 20 insertions(+)

diff --git a/fs/aio.c b/fs/aio.c
index 9acfd0708d92..60bb7fe7fdb4 100644
--- a/fs/aio.c
+++ b/fs/aio.c
@@ -49,6 +49,7 @@
 static DEFINE_SPINLOCK(aio_nr_lock);
 unsigned long aio_nr;		/* current system wide number of aio requests */
 unsigned long aio_max_nr = 0x10000; /* system wide maximum number of aio requests */
+EXPORT_SYMBOL_GPL(aio_max_nr);
 /*----end sysctl variables---*/
 
 static struct kmem_cache	*kiocb_cachep;
@@ -1353,6 +1354,7 @@ SYSCALL_DEFINE2(io_setup, unsigned, nr_events, aio_context_t __user *, ctxp)
 out:
 	return ret;
 }
+EXPORT_SYMBOL(sys_io_setup);
 
 /* sys_io_destroy:
  *	Destroy the aio_context specified.  May cancel any outstanding 
@@ -1370,6 +1372,7 @@ SYSCALL_DEFINE1(io_destroy, aio_context_t, ctx)
 	pr_debug("EINVAL: io_destroy: invalid context id\n");
 	return -EINVAL;
 }
+EXPORT_SYMBOL(sys_io_destroy);
 
 static void aio_advance_iovec(struct kiocb *iocb, ssize_t ret)
 {
@@ -1758,6 +1761,7 @@ long do_io_submit(aio_context_t ctx_id, long nr,
 	put_ioctx(ctx);
 	return i ? i : ret;
 }
+EXPORT_SYMBOL(sys_io_submit);
 
 /* sys_io_submit:
  *	Queue the nr iocbs pointed to by iocbpp for processing.  Returns
@@ -1855,6 +1859,7 @@ SYSCALL_DEFINE3(io_cancel, aio_context_t, ctx_id, struct iocb __user *, iocb,
 
 	return ret;
 }
+EXPORT_SYMBOL(sys_io_cancel);
 
 /* io_getevents:
  *	Attempts to read at least min_nr events and up to nr events from
@@ -1887,3 +1892,4 @@ SYSCALL_DEFINE5(io_getevents, aio_context_t, ctx_id,
 	asmlinkage_protect(5, ret, ctx_id, min_nr, nr, events, timeout);
 	return ret;
 }
+EXPORT_SYMBOL(sys_io_getevents);
diff --git a/fs/namei.c b/fs/namei.c
index 466d6eee6ffa..f1e540bf0591 100644
--- a/fs/namei.c
+++ b/fs/namei.c
@@ -3433,12 +3433,17 @@ EXPORT_SYMBOL(vfs_create);
 EXPORT_SYMBOL(vfs_follow_link);
 EXPORT_SYMBOL(vfs_link);
 EXPORT_SYMBOL(vfs_mkdir);
+EXPORT_SYMBOL(sys_mkdir);
 EXPORT_SYMBOL(vfs_mknod);
 EXPORT_SYMBOL(generic_permission);
 EXPORT_SYMBOL(vfs_readlink);
 EXPORT_SYMBOL(vfs_rename);
+EXPORT_SYMBOL(sys_rename);
 EXPORT_SYMBOL(vfs_rmdir);
+EXPORT_SYMBOL(sys_rmdir);
 EXPORT_SYMBOL(vfs_symlink);
+EXPORT_SYMBOL(sys_symlink);
 EXPORT_SYMBOL(vfs_unlink);
+EXPORT_SYMBOL(sys_unlink);
 EXPORT_SYMBOL(dentry_unhash);
 EXPORT_SYMBOL(generic_readlink);
diff --git a/fs/open.c b/fs/open.c
index ca155d4f23d3..cc1c412b7d10 100644
--- a/fs/open.c
+++ b/fs/open.c
@@ -545,6 +545,7 @@ out_release:
 out:
 	return error;
 }
+EXPORT_SYMBOL(sys_chmod);
 
 SYSCALL_DEFINE5(fchownat, int, dfd, const char __user *, filename, uid_t, user,
 		gid_t, group, int, flag)
@@ -591,6 +592,7 @@ out_release:
 out:
 	return error;
 }
+EXPORT_SYMBOL(sys_lchown);
 
 SYSCALL_DEFINE3(fchown, unsigned int, fd, uid_t, user, gid_t, group)
 {
diff --git a/fs/utimes.c b/fs/utimes.c
index cc428b21d789..46feb75f0a00 100644
--- a/fs/utimes.c
+++ b/fs/utimes.c
@@ -1,3 +1,4 @@
+#include <linux/module.h>
 #include <linux/compiler.h>
 #include <linux/file.h>
 #include <linux/fs.h>
@@ -170,6 +171,7 @@ long do_utimes(int dfd, const char __user *filename, struct timespec *times,
 out:
 	return error;
 }
+EXPORT_SYMBOL(do_utimes);
 
 SYSCALL_DEFINE4(utimensat, int, dfd, const char __user *, filename,
 		struct timespec __user *, utimes, int, flags)
diff --git a/include/linux/aio.h b/include/linux/aio.h
index b1a520ec8b59..8ebe42e49030 100644
--- a/include/linux/aio.h
+++ b/include/linux/aio.h
@@ -208,6 +208,7 @@ struct kioctx {
 extern unsigned aio_max_size;
 
 #ifdef CONFIG_AIO
+#define HAS_AIO_MAX
 extern ssize_t wait_on_sync_kiocb(struct kiocb *iocb);
 extern int aio_put_req(struct kiocb *iocb);
 extern void kick_iocb(struct kiocb *iocb);
diff --git a/include/linux/major.h b/include/linux/major.h
index 6a8ca98c9a96..faf6692896dd 100644
--- a/include/linux/major.h
+++ b/include/linux/major.h
@@ -146,6 +146,7 @@
 #define UNIX98_PTY_SLAVE_MAJOR	(UNIX98_PTY_MASTER_MAJOR+UNIX98_PTY_MAJOR_COUNT)
 
 #define DRBD_MAJOR		147
+#define MARS_MAJOR		148
 #define RTF_MAJOR		150
 #define RAW_MAJOR		162
 
diff --git a/mm/page_alloc.c b/mm/page_alloc.c
index ba0fa4bc16f3..4ae239b161e5 100644
--- a/mm/page_alloc.c
+++ b/mm/page_alloc.c
@@ -177,6 +177,7 @@ static char * const zone_names[MAX_NR_ZONES] = {
 };
 
 int min_free_kbytes = 1024;
+EXPORT_SYMBOL(min_free_kbytes);
 
 static unsigned long __meminitdata nr_kernel_pages;
 static unsigned long __meminitdata nr_all_pages;
@@ -5256,6 +5257,7 @@ void setup_per_zone_wmarks(void)
 	/* update totalreserve_pages */
 	calculate_totalreserve_pages();
 }
+EXPORT_SYMBOL(setup_per_zone_wmarks);
 
 /*
  * The inactive anon list should be small enough that the VM never has to
diff --git a/mm/swap_state.c b/mm/swap_state.c
index 7b3dadd136e1..6028574dbc20 100644
--- a/mm/swap_state.c
+++ b/mm/swap_state.c
@@ -43,6 +43,7 @@ struct address_space swapper_space = {
 	.i_mmap_nonlinear = LIST_HEAD_INIT(swapper_space.i_mmap_nonlinear),
 	.backing_dev_info = &swap_backing_dev_info,
 };
+EXPORT_SYMBOL(swapper_space);
 
 #define INC_CACHE_INFO(x)	do { swap_cache_info.x++; } while (0)
 
-- 
2.25.0

